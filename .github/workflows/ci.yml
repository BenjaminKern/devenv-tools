name: CI
on:
  workflow_dispatch:
    inputs:
      force_release:
        description: Force create release (will update "latest" tag)
        required: false
        default: "true"
        type: boolean
jobs:
  all:
    if: always()
    name: all-jobs
    runs-on: ubuntu-latest
    needs:
      - build
      - release
    steps:
      - run: jq --exit-status 'all(.result == "success")' <<< '${{ toJson(needs) }}'
  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          pattern: artifact-*
          merge-multiple: true
      - name: Update release
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          gh release delete latest --yes || true
          git tag -d latest 2>/dev/null || true
          git push origin :refs/tags/latest 2>/dev/null || true

          git tag latest
          git push origin latest

          gh release create latest *.tar.xz *.zip \
            --title "Latest Development Build" \
            --notes "This is the latest development build, automatically generated from the main branch.

          **Build Information:**
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          - Workflow Run: ${{ github.run_number }}
          - Triggered by: @${{ github.actor }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-2022
        include:
          - os: ubuntu-latest
            image: ghcr.io/benjaminkern/ci-images/ubuntu/20.04:main
            btop_build_options: CC=clang CXX=clang++ GPU_SUPPORT=false ADDFLAGS="-stdlib=libc++ -static -lc++abi -pthread -fuse-ld=lld"
            nvim_build_options: -GNinja -DCMAKE_C_COMPILER=clang
            nvim_package_name: nvim-linux-x86_64.tar.gz
            llvm_build_options: -DLLVM_ENABLE_LIBCXX=ON -DLLVM_USE_STATIC_ZSTD=ON -DLLVM_ENABLE_LLD=ON -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_ENABLE_PLUGINS=OFF -DLLVM_STATIC_LINK_CXX_STDLIB=ON
            suffix: x86_64-linux
            extension: ""
          - os: macos-latest
            image: null
            btop_build_options: ""
            nvim_build_options: -GNinja -DCMAKE_C_COMPILER=clang -DCMAKE_FIND_FRAMEWORK=NEVER -DENABLE_LIBINTL=OFF
            nvim_package_name: nvim-macos-arm64.tar.gz
            llvm_build_options: -DLLVM_ENABLE_LIBCXX=ON -DLLVM_USE_STATIC_ZSTD=ON
            suffix: aarch64-macos
            extension: ""
          - os: windows-2022
            image: null
            btop_build_options: ""
            nvim_build_options: -GNinja -DCMAKE_C_COMPILER=cl
            nvim_package_name: nvim-win64.zip
            llvm_build_options: -GNinja -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -DLLVM_ENABLE_ZLIB=OFF -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded -DLLVM_PARALLEL_LINK_JOBS=1
            suffix: x86_64-windows
            extension: .exe
    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.image }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup directories and download licenses
        shell: bash
        run: |
          mkdir -p "$GITHUB_WORKSPACE"/devenv/{bin,lib,licenses}
          mkdir -p "$GITHUB_WORKSPACE"/devenv/licenses/{yq,dive,actionlint,age,shfmt,fzf,buildifier,buildozer,bazelisk,vhs,oh-my-posh,btop,neovim,llvm,lldb,gontlm-proxy,clang-tools-extra,dust,fd,rg,uv,ruff,hyperfine,bat,sd,lsd,zoxide,delta,watchexec,stylua,deno,hexyl,typos,fish-shell}
          cp {devenv_tools.bash,devenv_tools.zsh,devenv_tools.bat} "$GITHUB_WORKSPACE"/devenv

          download_license() {
            local repo="$1" file="$2" dest="$3"
            curl -fsSL "https://raw.githubusercontent.com/$repo/refs/heads/main/$file" -o "$GITHUB_WORKSPACE/devenv/licenses/$dest" || \
            curl -fsSL "https://raw.githubusercontent.com/$repo/refs/heads/master/$file" -o "$GITHUB_WORKSPACE/devenv/licenses/$dest"
          }

          download_license "bdwyertech/gontlm-proxy" "LICENSE" "gontlm-proxy/LICENSE"
          download_license "mikefarah/yq" "LICENSE" "yq/LICENSE"
          download_license "wagoodman/dive" "LICENSE" "dive/LICENSE"
          download_license "rhysd/actionlint" "LICENSE.txt" "actionlint/LICENSE.txt"
          download_license "FiloSottile/age" "LICENSE" "age/LICENSE"
          download_license "mvdan/sh" "LICENSE" "shfmt/LICENSE"
          download_license "junegunn/fzf" "LICENSE" "fzf/LICENSE"
          download_license "bazelbuild/buildtools" "LICENSE" "buildifier/LICENSE"
          download_license "bazelbuild/buildtools" "LICENSE" "buildozer/LICENSE"
          download_license "bazelbuild/bazelisk" "LICENSE" "bazelisk/LICENSE"
          download_license "charmbracelet/vhs" "LICENSE" "vhs/LICENSE"
          download_license "JanDeDobbeleer/oh-my-posh" "COPYING" "oh-my-posh/COPYING"
          download_license "aristocratos/btop" "LICENSE" "btop/LICENSE"
          download_license "neovim/neovim" "LICENSE.txt" "neovim/LICENSE.txt"
          download_license "llvm/llvm-project" "LICENSE.TXT" "llvm/LICENSE.txt"
          download_license "llvm/llvm-project" "lldb/LICENSE.TXT" "lldb/LICENSE.txt"
          download_license "llvm/llvm-project" "clang-tools-extra/LICENSE.TXT" "clang-tools-extra/LICENSE.txt"
          download_license "bootandy/dust" "LICENSE" "dust/LICENSE"
          download_license "sharkdp/fd" "LICENSE-MIT" "fd/LICENSE-MIT"
          download_license "sharkdp/fd" "LICENSE-APACHE" "fd/LICENSE-APACHE"
          download_license "BurntSushi/ripgrep" "LICENSE-MIT" "rg/LICENSE-MIT"
          download_license "BurntSushi/ripgrep" "UNLICENSE" "rg/UNLICENSE"
          download_license "BurntSushi/ripgrep" "COPYING" "rg/COPYING"
          download_license "astral-sh/uv" "LICENSE-APACHE" "uv/LICENSE-APACHE"
          download_license "astral-sh/uv" "LICENSE-MIT" "uv/LICENSE-MIT"
          download_license "astral-sh/ruff" "LICENSE" "ruff/LICENSE"
          download_license "sharkdp/hyperfine" "LICENSE-APACHE" "hyperfine/LICENSE-APACHE"
          download_license "sharkdp/hyperfine" "LICENSE-MIT" "hyperfine/LICENSE-MIT"
          download_license "sharkdp/bat" "LICENSE-APACHE" "bat/LICENSE-APACHE"
          download_license "sharkdp/bat" "LICENSE-MIT" "bat/LICENSE-MIT"
          download_license "chmln/sd" "LICENSE" "sd/LICENSE"
          download_license "lsd-rs/lsd" "LICENSE" "lsd/LICENSE"
          download_license "ajeetdsouza/zoxide" "LICENSE" "zoxide/LICENSE"
          download_license "dandavison/delta" "LICENSE" "delta/LICENSE"
          download_license "watchexec/watchexec" "LICENSE" "watchexec/LICENSE"
          download_license "JohnnyMorganz/StyLua" "LICENSE.md" "stylua/LICENSE.md"
          download_license "denoland/deno" "LICENSE.md" "deno/LICENSE.md"
          download_license "sharkdp/hexyl" "LICENSE-APACHE" "hexyl/LICENSE-APACHE"
          download_license "sharkdp/hexyl" "LICENSE-MIT" "hexyl/LICENSE-MIT"
          download_license "crate-ci/typos" "LICENSE-APACHE" "typos/LICENSE-APACHE"
          download_license "crate-ci/typos" "LICENSE-MIT" "typos/LICENSE-MIT"
          download_license "fish-shell/fish-shell" "COPYING" "fish-shell/COPYING"
      - uses: actions/setup-go@v5
        if: ${{ matrix.os != 'ubuntu-latest' }}
        with:
          go-version: stable
      - name: Build and install Go tools
        run: |
          export GO_LDFLAGS="-s -w"
          go install github.com/mikefarah/yq/v4@latest
          go install github.com/wagoodman/dive@latest
          go install github.com/rhysd/actionlint/cmd/actionlint@latest
          go install filippo.io/age/cmd/...@latest
          go install mvdan.cc/sh/v3/cmd/shfmt@latest
          go install github.com/junegunn/fzf@latest
          go install github.com/bazelbuild/buildtools/buildifier@latest
          go install github.com/bazelbuild/buildtools/buildozer@latest
          go install github.com/bazelbuild/bazelisk@latest
          go install github.com/charmbracelet/vhs@latest
      - name: Copy Go tools
        shell: bash
        run: |
          cp "$HOME"/go/bin/{yq,actionlint,age,age-keygen,bazelisk,buildifier,dive,fzf,shfmt,vhs}${{ matrix.extension }} "$GITHUB_WORKSPACE"/devenv/bin
      - name: Download sources (oh-my-posh, btop, neovim, llvm)
        run: |
          git clone --depth 1 https://github.com/JanDeDobbeleer/oh-my-posh.git
          git clone --depth 1 https://github.com/aristocratos/btop.git btop-src
          git clone --depth 1 https://github.com/neovim/neovim.git neovim-src
          git clone --depth 1 https://github.com/bdwyertech/gontlm-proxy.git gontlm-proxy-src
          git clone --depth 1 https://github.com/Kitware/CMake.git cmake-src
          git clone --branch llvmorg-20.1.8 --depth 1 https://github.com/llvm/llvm-project.git llvm-src
          git clone --depth 1 https://github.com/fish-shell/fish-shell.git fish-shell-src
      - name: Build oh-my-posh
        shell: bash
        run: |
          cd oh-my-posh/src
          go build -o "$GITHUB_WORKSPACE/devenv/bin/oh-my-posh${{ matrix.extension }}"
      - name: Build gontlm-proxy
        if: ${{ matrix.os == 'windows-2022' }}
        run: |
          echo $env:GO_LDFLAGS
          cd gontlm-proxy-src
          go build -o $env:GITHUB_WORKSPACE\devenv\bin\gontlm-proxy${{ matrix.extension }}
      - name: Prepare windows msvc
        if: ${{ matrix.os == 'windows-2022' }}
        run: |
          .github/scripts/env.ps1
      - name: Build btop
        if: ${{ matrix.os != 'windows-2022' }}
        run: |
          make -C btop-src ${{ matrix.btop_build_options }}
          cp btop-src/bin/btop "$GITHUB_WORKSPACE"/devenv/bin
      - name: Build neovim
        run: |
          cmake -S neovim-src/cmake.deps -B neovim-src/.deps -DCMAKE_BUILD_TYPE=Release ${{ matrix.nvim_build_options }}
          cmake --build neovim-src/.deps
          cmake -S neovim-src -Bbuild-neovim -DCMAKE_BUILD_TYPE=Release ${{ matrix.nvim_build_options }}
          cmake --build build-neovim --target package
      - name: Extract neovim
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-2022" ]]; then
            powershell -Command "Expand-Archive -Path 'build-neovim/${{ matrix.nvim_package_name }}' -DestinationPath '$env:GITHUB_WORKSPACE/devenv'"
          else
            tar xfz build-neovim/${{ matrix.nvim_package_name }} --strip=1 -C "$GITHUB_WORKSPACE"/devenv
          fi
      - name: Clang tools/lldb configure
        run: |
          cmake -Bbuild-clangd -S llvm-src/llvm "-DLLVM_ENABLE_PROJECTS=clang;lldb;clang-tools-extra" -GNinja -DCMAKE_BUILD_TYPE=Release -DLLDB_INCLUDE_TESTS=OFF -DLLDB_ENABLE_LIBEDIT=OFF -DLLDB_ENABLE_CURSES=OFF -DLLDB_ENABLE_LIBXML2=OFF -DLLDB_ENABLE_PYTHON=OFF "-DLLVM_TARGETS_TO_BUILD=X86;AArch64;ARM" ${{ matrix.llvm_build_options }}
      - name: Clang tools/lldb build
        run: |
          cmake --build build-clangd --target clang-tidy clangd clang-format clangd-indexer clang-doc lldb lldb-dap lldb-server
      - name: Add clang tools/lldb
        shell: bash
        run: |
          cp build-clangd/bin/{clang-tidy,clangd,clang-format,clangd-indexer,clang-doc,lldb,lldb-dap,lldb-server}${{ matrix.extension }} "$GITHUB_WORKSPACE"/devenv/bin
          cp -r build-clangd/lib/clang "$GITHUB_WORKSPACE"/devenv/lib
      - name: Copy LLDB libraries
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-2022" ]]; then
            cp build-clangd/bin/*.dll "$GITHUB_WORKSPACE"/devenv/bin
          else
            cp build-clangd/lib/liblldb.* "$GITHUB_WORKSPACE"/devenv/lib
          fi
      - name: Prepare rust tools configuration
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          echo "RUSTFLAGS=-Clink-arg=-fuse-ld=lld" >> "$GITHUB_ENV"
          echo "CC=clang" >> "$GITHUB_ENV"
          echo "CXX=clang++" >> "$GITHUB_ENV"
      - name: Rust unix tools
        shell: bash
        if: ${{ matrix.os != 'windows-2022' }}
        run: |
          cd fish-shell-src
          PCRE2_SYS_STATIC=1 cargo build --release --bin fish
          ls target
          cp target/release/fish* "$GITHUB_WORKSPACE"/devenv/bin
          ls "$GITHUB_WORKSPACE"/devenv/bin
      - name: Rust tools
        run: |
          echo "$RUSTFLAGS"
          cargo install --locked du-dust
          cargo install --locked fd-find
          cargo install --locked ripgrep
          cargo install --locked --git https://github.com/astral-sh/uv uv
          cargo install --locked --git https://github.com/astral-sh/ruff ruff
          cargo install --locked hyperfine
          cargo install --locked bat
          cargo install --locked sd
          cargo install --locked lsd
          cargo install --locked zoxide
          cargo install --locked git-delta
          cargo install --locked watchexec-cli
          cargo install --locked stylua
          cargo install --locked hexyl
          cargo install --locked typos-cli
          cargo install --locked deno
      - name: Copy Rust tools
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            cp /usr/local/rust/cargo/bin/{dust,fd,rg,uv,uvx,ruff,hyperfine,bat,sd,lsd,zoxide,delta,watchexec,stylua,deno,hexyl,typos} "$GITHUB_WORKSPACE"/devenv/bin
            cp /usr/local/rust/cargo/bin/fish* "$GITHUB_WORKSPACE"/devenv/bin 2>/dev/null || true
          else
            cp "$HOME"/.cargo/bin/{dust,fd,rg,uv,uvx,ruff,hyperfine,bat,sd,lsd,zoxide,delta,watchexec,stylua,deno,hexyl,typos}${{ matrix.extension }} "$GITHUB_WORKSPACE"/devenv/bin
          fi
      - name: Package tools
        shell: bash
        run: |
          tar cfJ devenv-tools-${{ matrix.suffix }}.tar.xz devenv
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: artifact-tools-${{ matrix.suffix }}
          path: devenv-tools-${{ matrix.suffix }}.tar.xz
          retention-days: 1
